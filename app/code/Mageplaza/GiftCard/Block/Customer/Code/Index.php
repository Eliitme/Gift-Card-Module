<?php

namespace Mageplaza\GiftCard\Block\Customer\Code;

use Magento\Customer\Helper\Session\CurrentCustomer;
use Magento\Directory\Model\Currency;
use Magento\Framework\View\Element\Template;
use Magento\Store\Model\StoreManager;
use Mageplaza\GiftCard\Model\ResourceModel\GiftCardCustomerBalance\CollectionFactory;

class Index extends Template
{

    protected $_customerBalance;

    /**
     * @var \Magento\Customer\Helper\Session\CurrentCustomer
     */
    protected $currentCustomer;
    protected $_currency;
    protected $_storeManager;

    public function __construct(Template\Context $context, array $data = [],
                                CollectionFactory $giftCardCustomerBalance,
                                CurrentCustomer $currentCustomer,
                                Currency $currency,
                                StoreManager $storeManager)
    {
        parent::__construct($context, $data);
        $this->_customerBalance = $giftCardCustomerBalance;
        $this->currentCustomer = $currentCustomer;
        $this->_currency = $currency;
        $this->_storeManager = $storeManager;
    }

    public function getCurrentSymbol()
    {

        $currencyCode = $this->_storeManager->getStore()->getCurrentCurrencyCode();
        $currencySymbol = $this->_currency->load($currencyCode)->getCurrencySymbol();

        return $currencySymbol;
    }


    public function getBalanceCustomer()
    {
        $balance = 0;
        $id = $this->getCurrentCustomer()->getCustomerId();

        $customer = $this->_customerBalance->create()->addFieldToFilter('customer_id', $id)->getFirstItem();

        if ($customer->getData() == null) {
            $precision = 0;
            

            $balance = 0;
        } else {
            $precision = 2;

            $balance = $customer['balance'];
        }

        return $this->_currency->format($balance, ['symbol' => $this->getCurrentSymbol(), 'precision' => $precision], false, false);
    }

    /**
     * @return \Magento\Customer\Helper\Session\CurrentCustomer
     */
    public function getCurrentCustomer()
    {
        return $this->currentCustomer;
    }

    protected function _toHtml()
    {
        return parent::_toHtml(); // TODO: Change the autogenerated stub
    }

}

