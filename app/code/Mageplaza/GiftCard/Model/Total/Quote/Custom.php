<?php


namespace Mageplaza\GiftCard\Model\Total\Quote;


use Magento\Checkout\Controller\Cart\UpdatePost;
use Mageplaza\GiftCard\Model\GiftCardFactory;

class Custom extends \Magento\Quote\Model\Quote\Address\Total\AbstractTotal
{
    const COLLECTOR_TYPE_CODE = 'customer_discount';

    /**
     * @var \Magento\Framework\Pricing\PriceCurrencyInterface
     */
    protected $_priceCurrency;

    /**
     * Custom constructor.
     * @param \Magento\Framework\Pricing\PriceCurrencyInterface $priceCurrency
     */

    protected $giftCardFactory;
    /**
     * @var UpdatePost
     */
    private $post;

    public function __construct(
//        UpdatePost $post,
        \Magento\Framework\Pricing\PriceCurrencyInterface $priceCurrency,
        GiftCardFactory $giftCardFactory
    )
    {
        $this->_priceCurrency = $priceCurrency;
        $this->giftCardFactory = $giftCardFactory;
//        $this->post = $post;
    }

    /**
     * @param \Magento\Quote\Model\Quote $quote
     * @param \Magento\Quote\Api\Data\ShippingAssignmentInterface $shippingAssignment
     * @param \Magento\Quote\Model\Quote\Address\Total $total
     * @return $this|bool
     */
    public function collect(
        \Magento\Quote\Model\Quote $quote,
        \Magento\Quote\Api\Data\ShippingAssignmentInterface $shippingAssignment,
        \Magento\Quote\Model\Quote\Address\Total $total
    )
    {
        parent::collect($quote, $shippingAssignment, $total);
        $giftCardCode = $quote->getGiftcardCode();

        $giftCard = $this->giftCardFactory->create()->load($giftCardCode, 'code');

        $subtotal = (float)$total->getSubtotal();
        $writer = new \Zend\Log\Writer\Stream(BP . '/var/log/test.log');
        $logger = new \Zend\Log\Logger();
        $logger->addWriter($writer);

        $giftCardBaseDiscount = null;
        if (!empty($giftCard)) {
            if ((float)$giftCard->getBalance() > (float)$giftCard->getAmountUsed()) {
                $restBalance = (float)$giftCard->getBalance() - (float)$giftCard->getAmountUsed();

                if ($restBalance >= $subtotal) {
                    $giftCardBaseDiscount = $subtotal;
                } else {
                    $giftCardBaseDiscount = $restBalance;
                }

//                $quote->setGiftcardBaseDiscount($total->getCustomerBaseDiscount())->save();
            }
        }

        $giftCardDiscount = $this->_priceCurrency->convert($giftCardBaseDiscount);

        $total->setTotalAmount('customer_discount', -$giftCardDiscount);
        $total->setBaseTotalAmount('customer_discount', -$giftCardBaseDiscount);

        $total->setSubtotalWithDiscount($total->getSubtotal() - $giftCardDiscount);

        $quote->setGiftcardDiscount(-$giftCardDiscount)->save();

//        $logger->info(json_encode($total->getGrandTotal()));

//        $this->post->getRequest()
        return $this;
    }

    public function fetch(\Magento\Quote\Model\Quote $quote, \Magento\Quote\Model\Quote\Address\Total $total)
    {
        $result = null;
        $amount = $quote->getGiftcardDiscount();

        if ($amount != 0) {
            $result = [
                'code' => $this->getCode(),
                'title' => __('Gift Card Discount'),
                'value' => $amount
            ];
        }

        return $result;
//        return parent::fetch($quote, $total); // TODO: Change the autogenerated stub
    }
}